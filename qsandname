import pandas as pd
import hashlib
import re
from pypinyin import lazy_pinyin

# 提取汉字
def extract_chinese(text):
    return re.sub(r'[^\u4e00-\u9fa5]', '', text)

# 生成稳定的三位数字
def stable_number(name):
    hash_val = hashlib.md5(name.encode('utf-8')).hexdigest()
    return 100 + (int(hash_val[:6], 16) % 900)

# 生成型号：拼音首字母（不超4个）+ 稳定数字
def generate_model(name):
    chinese_name = extract_chinese(name)
    initials = [lazy_pinyin(char)[0][0] for char in chinese_name[:4]]
    short_code = ''.join(initials)
    number = stable_number(name)
    return f'QS_{short_code}_{number}'

# 读取文件
df_qs = pd.read_excel('QS.xlsx')
df_a = pd.read_excel('1766.xlsx')

# 只提取汉字，并根据汉字建立品名到型号的映射
qs_map = df_qs.drop_duplicates(subset='品名').set_index('品名')['型号'].to_dict()

# 用来保存结果
model_list = []
match_list = []

# 遍历 A 文件中的品名
for name in df_a['品名']:
    # 提取中文字符进行匹配
    chinese_name = extract_chinese(name)
    
    # 检查是否有匹配的品名（仅汉字部分）
    matched = False
    for qs_name, model in qs_map.items():
        if extract_chinese(qs_name) == chinese_name:
            model_list.append(model)
            match_list.append('是')
            matched = True
            break
            
    if not matched:
        # 如果没有匹配到，生成一个新的型号
        model_list.append(generate_model(name))
        match_list.append('否')

# 添加列
df_a['型号'] = model_list
df_a['是否匹配'] = match_list

# 计算匹配率
match_percent = match_list.count('是') / len(match_list) * 100

# 为每一行添加匹配率列，显示为百分比
df_a['匹配率'] = match_percent

# 保存结果到原文件176.xlsx
df_a.to_excel('1766.xlsx', index=False)
